Q1. 이진탐색에 대해 간단히 설명하시오.

이진탐색이란 주어진 자료형에서 원하는 키값이 있는지 찾아내는 탐색 방법이다.
이진 탐색은 숫자 혹은 숫자로 나타낼 수 있는 자료형에 적용할 수 있으며,
자료의 탐색을 위해 정렬이 반드시 필요하다.

이진탐색의 탐색 방법은 다음과 같다.
 1. 주어진 자료에서 시작과 끝 인덱스를 기준으로 중앙값을 찾는다.
 2. 중앙값이 내가 원하는 키값인지를 학인한다.
 3. 중앙값이 키값보다 작으면 끝 인덱스를 중앙인덱스(혹은 중앙인덱스 -1)로 재설정하고,
    마찬가지로 중앙값이 키값보다 크면 시작 인덱스를 중앙인덱스(혹은 중앙인덱스 -1)로 재설정한다.
 4. 이후 위 과정을 반복한다.
이처럼 탐색 범위를 한 회차당 절반씩 줄여나가면서 탐색을 하기 때문에 순차탐색보다 훨씬 효율이 좋다.

이진탐색을 코드로 구현하면 다음과 같이 표현할 수 있다.
```python
arr = list(map(int, input().split()))
n = len(arr)

def binarySearch(arr, n, key):  # 배열과 배열의 길이, 키 값을 받음
    arr.sort()  # 배열을 정렬시킴
    start = 0  # 시작 인덱스
    end = n - 1  # 끝 인덱스
    while start <= end:  # 시작 인덱스가 끝 인덱스보다 커지면 반복문 종료
        mid = (start + end)//2  # 중앙 인덱스
        if key == arr[mid]:  # 해답을 찾으면 True 반환
            return True
        elif key < arr[mid]:  # 키값이 중앙값보다 작으면 끝인덱스를 변경
            end = mid
        elif key > arr[mid]:  # 키값이 중앙값보다 크면 시작인덱스를 변경
            start = mid
    return False  # 배열 내 원하는 키값이 없으면 False 반환
```


Q2. 이분탐색 파이썬 코드 작성

```python
def binarySearch(a, N, key):
    start = 0
    end = N - 1
    while start <= end:
        mid = (start + end)//2
        if key == arr[mid]:
            return True
        elif key < arr[mid]:
            end = mid
        elif key > arr[mid]:
            start = mid
    return False

# 코드 실행
arr = [2, 4, 7, 9, 11, 19, 23]
n = len(arr)

print(binarySearch(arr, n, 11))  # True
print(binarySearch(arr, n, 10))  # False
```